{"version":3,"sources":["Barchart.js","App.js","reportWebVitals.js","index.js"],"names":["Barchart","props","ResponsiveContainer","width","height","BarChart","margin","top","left","right","bottom","data","CartesianGrid","strokeDasharray","XAxis","dataKey","YAxis","ticks","Legend","layout","wrapperStyle","position","Bar","fill","unit","App","useState","firstSpeedValue","setFirstSpeed","secondSpeedValue","setSecondSpeed","distanceValue","setDistance","carType","setCarType","useEffect","console","log","consumption","setConsumption","includes","chartData","setData","toFixed","Math","pow","differences","setDifferences","tmpArr","length","abs","Aika","Kulutus","renderTime","value","floor","decimalPoint","Card","style","backgroundColor","Body","Header","className","fontWeight","color","OverlayTrigger","placement","overlay","Tooltip","Dropdown","justifyContent","Toggle","Menu","map","option","Item","eventKey","onSelect","CardColumns","isFinite","Text","Title","InputGroup","FormControl","placeholder","isNaN","onChange","e","target","type","min","Append","step","max","size","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6fee2eca.chunk.js","sourcesContent":["import React from 'react'\nimport { BarChart, CartesianGrid, XAxis, YAxis, Tooltip, Legend, Bar, ResponsiveContainer } from 'recharts'\n\nconst Barchart = (props) => {\n    return(\n        <ResponsiveContainer width=\"95%\" height='100%'>\n            <BarChart margin={{top: 15, left: 0, right: 5, bottom: 25}} data={props.data}>\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis dataKey=\"name\" />\n                <YAxis ticks={false} />\n                <Tooltip />\n                <Legend layout='horizontal' wrapperStyle={{bottom:25,left:0,position:'relative'}}/>\n                <Bar dataKey=\"Aika\" fill=\"#82cddd\" unit=' tuntia' />\n                <Bar dataKey=\"Kulutus\" fill=\"#8b998f\" unit=' litraa' />\n            </BarChart>\n        </ResponsiveContainer>\n    )\n}\n\nexport default Barchart","import { Card, CardColumns, FormControl, Tooltip, OverlayTrigger, Dropdown, InputGroup } from 'react-bootstrap'\nimport React, { useEffect, useState } from 'react'\nimport \"bootstrap/dist/css/bootstrap.css\"\nimport \"bootstrap-slider/dist/css/bootstrap-slider.css\"\nimport 'react-bootstrap-range-slider/dist/react-bootstrap-range-slider.css';\nimport Barchart from './Barchart'\nimport { InfoCircle } from 'react-bootstrap-icons'\nimport RangeSlider from 'react-bootstrap-range-slider'\nimport './styles.css'\n\nconst App = () => {\n\n  // State variables for parameters set by user : speed values, distance and car type\n  const [firstSpeedValue, setFirstSpeed] = useState(80)\n  const [secondSpeedValue, setSecondSpeed] = useState(100)\n  const [distanceValue, setDistance] = useState(\"\")\n  const [carType, setCarType] = useState(\"AUTO A: N. 6L / 100KM\")\n  const carTypes = [\n    \"AUTO A: N. 6L / 100KM\",\n    \"AUTO B: N. 7.1L / 100KM\",\n    \"AUTO C: N. 8.1L / 100KM\"\n  ]\n\n  // useEffect hook for controlling negative input values\n  useEffect(() => {\n    if (firstSpeedValue < 0) {\n      console.log(typeof firstSpeedValue)\n      setFirstSpeed(0)\n    } else if (firstSpeedValue > 200) {\n      setFirstSpeed(200)\n    }\n    if (secondSpeedValue < 0) {\n      setSecondSpeed(0)\n    } else if (secondSpeedValue > 200) {\n      setSecondSpeed(200)\n    }\n    if (distanceValue < 0) {\n      setDistance(0)\n    } else if (distanceValue > 1000) {\n      setDistance(1000)\n    }\n  }, [firstSpeedValue, secondSpeedValue, distanceValue])\n\n  // State variable and useEffect hook for setting fuel consumption according to selected car type\n  const [consumption, setConsumption] = useState(0)\n  useEffect(() => {\n    if (carType != null) {\n      if (carType.includes('AUTO A')) {\n        setConsumption(3)\n      } else if (carType.includes('AUTO B')) {\n        setConsumption(3.5)\n      } else if (carType.includes('AUTO C')) {\n        setConsumption(4)\n      }\n    }\n  }, [carType])\n\n  // State variable and useEffect hook for setting data for the bar chart. Data also used for calculating differences\n  const [chartData, setData] = useState([])\n  useEffect(() => {\n    if (carType != null) {\n      setData([\n        {\n          'name': firstSpeedValue + ' km/h',\n          'Aika': (distanceValue / firstSpeedValue).toFixed(2),\n          'Kulutus': (consumption * Math.pow(1.009, firstSpeedValue - 1) / 100 * distanceValue).toFixed(1)\n        },\n        {\n          'name': secondSpeedValue + ' km/h',\n          'Aika': (distanceValue / secondSpeedValue).toFixed(2),\n          'Kulutus': (consumption * Math.pow(1.009, secondSpeedValue - 1) / 100 * distanceValue).toFixed(1)\n        }\n      ])\n    }\n  }, [firstSpeedValue, distanceValue, secondSpeedValue, consumption, carType])\n\n  // State variable and useEffect hook for setting the information on the differences in speed, time and consumption between selected speed values.\n  const [differences, setDifferences] = useState([])\n  useEffect(() => {\n    let tmpArr = []\n    if (chartData.length > 0) {\n      tmpArr = [\n        Math.abs(firstSpeedValue - secondSpeedValue),\n        Math.abs(chartData[0].Aika - chartData[1].Aika),\n        Math.abs(chartData[0].Kulutus - chartData[1].Kulutus)\n      ]\n    }\n    setDifferences(tmpArr)\n  }, [chartData, firstSpeedValue, secondSpeedValue])\n\n  // Render time value into hours and minutes\n  const renderTime = (value) => {\n    return Math.floor(value) + \"h \" + ((value - Math.floor(value)) * 60).toFixed() + \"min\"\n  }\n\n  // Change decimal separator from point to comma\n  const decimalPoint = (value) => {\n    return Math.floor(value) + \",\" + ((value - Math.floor(value)) * 10).toFixed()\n  }\n\n  return (\n    <Card style={{ margin: '1%', backgroundColor: '#f7f7f7' }}>\n      <Card.Body>\n        <Card.Header className='shadow' style={{ position: 'relative', backgroundColor: '#82cddd', fontWeight: 'bold', color: 'white' }}>\n          AUTOILUMITTARI\n          <OverlayTrigger\n            placement='left'\n            overlay=\n            {\n              <Tooltip>\n                Vertaile matka-aikaa ja polttoaineen kulutusta kahden eri valitun nopeuden mukaan.\n                Valitse ensin autotyyppi kulutuksen mukaan, sitten ajettavan matkan pituus. Aseta kaksi erilaista keskinopeutta ajomatkalle ja vertaa tuloksia pylväsdiagrammista.\n              </Tooltip>\n            }>\n            <InfoCircle color='white' style={{ position: 'absolute', top: 13, right: 10 }} />\n          </OverlayTrigger>\n        </Card.Header>\n        <Dropdown className='shadow' style={{ width: '100%', justifyContent: 'center' }}>\n          <OverlayTrigger\n            placement='left'\n            overlay=\n            {\n              <Tooltip>Kulutus 80km/h nopeudessa</Tooltip>\n            }>\n            <InfoCircle color='white' style={{ position: 'absolute', top: 12, right: 10 }} />\n          </OverlayTrigger>\n          <Dropdown.Toggle style={{ width: '100%' }}>{carType == null ? 'Valitse autotyyppi' : carType}</Dropdown.Toggle>\n          <Dropdown.Menu className='shadow' style={{ width: '100%' }}>\n            {\n              carTypes.map(option => (\n                <Dropdown.Item\n                  eventKey={option}\n                  key={option}\n                  onSelect={eventKey => setCarType(eventKey)}>\n                  {option}\n                </Dropdown.Item>\n              ))\n            }\n          </Dropdown.Menu>\n        </Dropdown>\n        <CardColumns >\n          <Card style={{ backgroundColor: '#fafcff', height: 475 }} className='my-2 p-1'  >\n            <Barchart data={chartData} />\n          </Card>\n          {\n            distanceValue > 0 && carType != null && isFinite(differences[1]) ? <Card className='p-3 my-2' style={{ backgroundColor: '#fafcff', height: 280 }}>\n              <Card.Text>Nopeudella <b>{firstSpeedValue} km/h</b> aikaa kuluu <b>{renderTime(chartData[0].Aika)}</b> ja polttoainetta kuluu <b>{decimalPoint(chartData[0].Kulutus)} litraa</b>.</Card.Text>\n              <Card.Text>Nopeudella <b>{secondSpeedValue} km/h</b> aikaa kuluu <b>{renderTime(chartData[1].Aika)}</b> ja polttoainetta kuluu <b>{decimalPoint(chartData[1].Kulutus)} litraa</b>.</Card.Text>\n              <Card.Text>Säästät siis aikaa <b>{Math.floor(differences[1])} h {((differences[1] - Math.floor(differences[1])) * 60).toFixed()} min</b> ajamalla <b>{differences[0]} km/h</b> nopeammin, ja\n              polttoainetta kuluu <b>{Math.floor(differences[2])},{((differences[2] - Math.floor(differences[2])) * 10).toFixed()} litraa</b> enemmän.</Card.Text>\n            </Card> :\n              <Card className='p-3 my-2' style={{ backgroundColor: '#fafcff', height: 280 }}>\n                <Card.Text>Valitse autotyyppi kulutuksen mukaan pudotusvalikosta ja aseta matkan pituus. Kokeile eri nopeuksia nähdäksesi matka-ajan ja kuluneen polttoaineen määrän viereisessä kuvaajassa. </Card.Text>\n              </Card>\n          }\n          <Card className='my-2 p-2' style={{ backgroundColor: '#fafcff' }} >\n            <Card.Title >Syötä ajomatka</Card.Title>\n            <InputGroup>\n              <FormControl\n                placeholder={distanceValue <= 0 || isNaN(distanceValue) ? \"Syötä kilometrit\" : distanceValue}\n                onChange={e => setDistance(e.target.value)}\n                value={distanceValue}\n                type='number'\n                min={1}\n              />\n              <InputGroup.Append>\n                <InputGroup.Text style={{backgroundColor: '#fafcff'}}>km</InputGroup.Text>\n              </InputGroup.Append>\n            </InputGroup>\n            <Card.Body>\n              <RangeSlider\n                value={distanceValue}\n                onChange={e => setDistance(e.target.value)}\n                step={1}\n                max={1000}\n                min={1}\n                size='lg'\n              />\n            </Card.Body>\n          </Card>\n          <Card style={{ backgroundColor: '#fafcff' }} className='my-2 p-2'>\n            <Card.Title >Syötä kaksi ajonopeutta</Card.Title>\n            <InputGroup>\n              <FormControl\n                placeholder={firstSpeedValue <= 0 || isNaN(firstSpeedValue) ? \"Syötä ajonopeus\" : firstSpeedValue}\n                onChange={e => !isNaN(firstSpeedValue) ? setFirstSpeed(e.target.value) : setFirstSpeed(0)}\n                value={firstSpeedValue}\n                type='number'\n                min={1}\n              />\n              <InputGroup.Append>\n                <InputGroup.Text style={{backgroundColor: '#fafcff'}}>km/h</InputGroup.Text>\n              </InputGroup.Append>\n            </InputGroup>\n            <Card.Body>\n              <RangeSlider\n                value={firstSpeedValue}\n                onChange={e => setFirstSpeed(e.target.value)}\n                step={1}\n                max={200}\n                min={1}\n                size='lg'\n              />\n            </Card.Body>\n            <InputGroup>\n              <FormControl\n                placeholder={secondSpeedValue <= 0 || isNaN(secondSpeedValue) ? \"Syötä ajonopeus\" : secondSpeedValue}\n                onChange={e => setSecondSpeed(e.target.value)}\n                value={secondSpeedValue}\n                type='number'\n                min={1}\n              />\n              <InputGroup.Append>\n                <InputGroup.Text style={{backgroundColor: '#fafcff'}}>km/h</InputGroup.Text>\n              </InputGroup.Append>\n            </InputGroup>\n            <Card.Body>\n              <RangeSlider\n                value={secondSpeedValue}\n                onChange={e => setSecondSpeed(e.target.value)}\n                step={1}\n                max={200}\n                min={1}\n                size='lg'\n              />\n            </Card.Body>\n          </Card>\n        </CardColumns>\n      </Card.Body>\n    </Card>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}